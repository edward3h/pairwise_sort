/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.ethelred.pairwise_sort;
import com.google.common.collect.Sets;
import org.ethelred.args4jboilerplate.Args4jBoilerplate;
import org.ethelred.util.ConsoleHelper;
import org.kohsuke.args4j.Option;

import java.io.IOException;
import java.nio.file.AtomicMoveNotSupportedException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

public class App  extends Args4jBoilerplate {

    @Option(name="--input", aliases = "-i", required = true)
    private Path inputFile;

    private final Set<Item> items;

    public App(String[] args) throws IOException
    {
        parseArgs(args);

        items = Files.lines(inputFile).map(Item::new).collect(Collectors.toSet());
    }

    public static void main(String[] args) throws IOException, ConsoleHelper.ConsoleKeyException
    {
        System.out.println(new App(args).run());
    }

    private boolean run() throws ConsoleHelper.ConsoleKeyException
    {
        var itemPairs = Sets.cartesianProduct(items, items)
                .stream()
                .map(ItemPair::new)
                .filter(ItemPair::isValid)
                .distinct()
                .collect(Collectors.toList());

        Collections.shuffle(itemPairs);

        mainloop: for (var ip :
                itemPairs)
        {
            System.out.printf("%n(1) %s%n(2) %s%n(q) quit scoring%n", ip.getFirst(), ip.getSecond());
            ConsoleHelper.Key k = ConsoleHelper.readKey();
            switch (k.getChar())
            {
                case '1':
                    ip.getFirst().up();
                    ip.getSecond().down();
                    break;
                case '2':
                    ip.getFirst().down();
                    ip.getSecond().up();
                    break;
                case 'q':
                    break mainloop;
            }
        }
        var rank = new AtomicInteger();
        items.stream()
                .sorted(Comparator.comparingDouble(Item::avg).reversed())
                .forEach(i -> System.out.printf("%d %f %s%n", rank.incrementAndGet(), i.avg(), i));
        return false;
    }
}
